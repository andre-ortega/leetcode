Leetcode problems can be boiled down to basic patterns that lead us to the fastest way to solve the problems

All of these patterns can prevent us from doing the Brute-Force solution

Knowing what to look for will make Leetcode much easier




1. Sliding Window

    - Used when we want to perate on a specific window size of a linked list/array
    - Window slides from the start to the end of the array
    - Traverses one element at a time

    How to identify:
        - Basically checking the subsets of the subarray to solve a problem
        - Only useful for contiguous data structures, like arrays/Linked Lists
        - Sliding window probably won't work if related elements are not next to each other 

    Example Problems:
        - Max Sum of subarray of size 'k' (easy)
        - Subarray of size K 
        - Longest substring of size K with distinct characters
        - String anagrams (hard)

    Detailed Problem:

        Given an array of integers arr and two integers k and threshold, return the number of 
        sub-arrays of size k and average greater than or equal to threshold

        Solution Pseudocode:

            1. Find the sum of the first k ints
            2. Add to counter if the average of sum over k is equal to or greater than the threshold
            3. For the rest of the array
                a. Slide window up by one element
                b. Calculate the average of these k elements
                c. If the k element's average is greater than the threshold, add to the counter
            4. Return counter

            [Answer is in slidingWindow.cpp]

2. Two Pointers or Iterators

    - Two pointers iterate through a data structure at the same time
    - Iterate until a certain condition is met
    - Alternative to looping through structure twice
    - Useful when searching pairs in a sorted array

    How to identify:
        - Sorted array / linked list (usually)
        - Need to find elements that fit a certain condition
        - Set that we need to find is a pair/triplet/subarray

    - An example problem is finding out if a sorted array contains two numbers that can find a target sum
        - Left pointer will be the smaller number
        - Right pointer will be the larger number

    Example Problems:
        - Squaring a sorted array (easy)
        - Triplets that sum to zero (medium)
        - Comparing strings that contain backspaces (medium)

    Detailed Problem:

        You are given an integer array height of length n. There are n vertical lines drawn such that the two 
        endpoints of the ith line are (i, 0) and (i, height[i]).

        Find two lines that together with the x-axis form a container, such that the container contains the 
        most water. Return the maximum amount of water a container can store.

        Two Pointers Pseudocode:
            1. Start at the beginning and end of the array
            2. While the two pointers don't intersect
                a. Find the minimum height
                b. Find the width
                c. Find the area
                d. If the area is larger than the current max, update it
                e. Increment or decrement the pointer that has the smaller height


3. Fast and Slow Pointers

    - Also known as Floyd's Cycle Detection Algorithm, or Hare and Tortoise Algorithm
    - Very useful with cyclic linked list/arrays
    - Two pointers that move at different speeds
    - They will catch up to each other due to their nature

    How to identify:
        - The problem deals with a loop in a linked list or array
        - When you need to know the position of a certain element or the overall length of the linked list

        When should I use it over the two pointer method mentioned above?
            - There are some cases where you shouldn't use the Two POinter approach such as in a singly 
              linked list where you cannot move in a backwards direction. An example of when to use the
              Fast and Slow pattern is when you are trying to determine if a linked list is a palindrome

    Example Problems:
        - Linked List Cycle (easy)
        - Palindrome Linked List (medium)
        - Cycle in a circular array (hard)


4. Merge intervals

    - The Merge Intervals pattern is an efficient technique to deal with overlapping intervals
    - In such problems, you need to either fund overlapping intervals or merge intervals if they overlap

    - There are six ways that two intervals ('a' and 'b') can overlap
        - 'a' and 'b' do not overlap
        - 'a' and 'b' overlap, 'b' ends after 'a'
        - 'a' and 'b' overlap, 'a' ends after 'b'
        - 'a' completely engulfs 'b'
        - 'b' completely engulfs 'a'
        - 'a' and 'b' do not overlap (but 'b' comes before 'a')

    - Understanding and recognizing htese six cases will help you solve a wide range of problems from 
      inserting intervals to optimizing interval merges

    How to identify:
        - You are asked to produce a list with only mutually exclusive intervals
        - You see the term "overlapping intervals"

    Example Problems:
        - Intervals Intersection (medium)
        - Maximum CPU Load (hard) 


5. Cyclic Sort

    - Describes approach to deal with problems involving arrays containing numbers in a given range
    - Iterates over the array one number at a time, and if the current number is not at the correct index,
      swap it with the number at the correct index

    How to identify:
        - Sorted array with numbers in a given range
        - If the problem asks you to find the missing/duplicate/smallest number in a sorted/unsorted array

    Example Problems:
        - Find the Missing number (easy)
        - Find the Smallest Missing Positive Number (medium)


6. In-Place Reversal of Linked List

    - Many problems ask to reverse the links between a set of nodes in a linked list.
    - Often must do this in place, thereby not using extra memory
    - This pattern reverses one node at a time starting with one variable (current) pointing to the head
      of the linked list, and one variable (previous) pointing to the previously processed link
    - In lock-step, reverse the current node by pointing it to the previous before moving on to the next 
      node, also updating the 'previous' to always point to the previous node processed.

    How to identify:
        - Asked to reverse a linked list without using extra memory

    Example Problems:
        - Reverse a Sub-list (medium)
        - Reverse ever K-element sub list (medium)


7. Tree BFS
    
    - BFS technique to traverse a tree and uses a queue to keep track of all the nodes of a level
      before jumping into the next level. This approach efficiently solves BFS
    - Push the root node into the queue and continually iterate until the queue is empty
    - Visit the node at the head of the queue at each iteration, then insert all of its children into the queue

    How to identify:
        - Asked to traverse a tree in a level-by-level fashion (or level-order traversal)

    Example Problems:
        - Binary Tree Level Order Traversal (easy)
        - Zigzag Traversal (medium)


8. Tree DFS

    - Depth First Search to traverse a tree
    - Can use recursion (or stack for iterative approach) to keep track of all previous (parent) nodes
      while traversing
    - Starting at the root of the tree, if the node is not a leaf you need to do three things:
        1. Decide whether to process the node now (pre-order), or between processing the two children 
           (in-order), or after processing both children (post-order)
        2. Make two recursive calls for both the children of the current node to process them

    How to identify:
        - Asked to traverse a tree with in-order, preorder- or postorder DFS
        - Problem requires searching for something where the node is closer to a leaf

    Example Problems:
        - Sum of Path Numbers (medium)
        - All Paths for a Sum (medium)


9. Two Heaps

    - Given a set of elements that we can divide into two parts
    - We are interested in knowing the smallest element in one part and the biggest element in the other part
    - Uses two heaps: a Min Heap to find the smallest element and a Max Heap to find the largest
    - Store first half in Max Heap to find the largest number in the first half, store second half in Min.
    - At any time, the median of the current list of numbers can be calculated from the top element of the
      two heaps

    How to Identify:
        - Useful in situations like Priority Queue or Scheduling
        - If the problem states that you need to find the smallest/largest/median elements of a set
        - Sometimes useful in problems featuring a binary tree data structure

    Example Problems:
        - Find the Median of a Number Stream (medium)


10. Subsets

    - A huge number of coding interview problems involve dealing with Permutations and Combinations of a 
      given set of elements. The pattern Subsets describes an efficient Breadth First Search (BFS) approach
      to handle all of these problems

    - The pattern looks like this:
        Given a set of [1, 5, 3]

            1. Start with an empty set [[]]

            2. Add the first number (1) to all the existing sibsets to create new subsets:
                [ [], [1] ]

            3. Add the second number (5) to all existing subsets:
                [ [], [1], [5], [1, 5] ]

            4. Add the third number (3) to all the existing subsets: 
                [ [], [1], [5], [1, 5], [3], [1, 3], [5, 3], [1, 5, 3] ]

    How to identify:
        - Problems involve finding the combinations or permutations of a given set

    Example Problems:
        - Subsets With Duplicates (easy)
        - String Permutations by Changing Case (medium)

 
11. Modified Binary Search

    - Whenever you are given a sorted array, linked list, or matrix, and are asked to find a certain element,
      the best algorithm you can use is the Binary Search
    - This pattern describes an efficient way to handle all problems involving Binary Search

    - The pattern looks like this for an ascending order set:

        1. Find the middle of start and end. An easy way to find the middle would be:
            middle = start + (start + end) / 2

        2. If the key is equal to the number at index middle then return middle

        3. If 'key' is not equal to the index middle:

            4. check if key < arr[middle], if so, reduce search to end = middle - 1
            5. check if key > arr[middle], if so, reduce search to start = middle + 1

    Example Problems:
        - Order-agnostic Binary Search (easy)
        - Search in a Sorted Infinite Array (medium)


12. Top K Elements

    - Any problem asking us to find the top/smallest/frequent 'K' elements among a given set
    - Best data structure to keep track of 'K' elements is Heap. This pattern will use the heap to solve
      multiple problems dealing with 'K' elements at a time from a set of given elements.

    - Pattern looks like this:

        1. Insert 'K' elements into the min-Heap or max-Heap based on the problem.

        2. Iterate through the remaining numbers and if you find one that is larger than what you have in the 
           heap, then remove that number and insert the larger one.

           Ex. Given the array:
                    [3, 1, 5, 12, 2, 11]

           - Insert the first three elements in the heap: 3, 1, 5, with 1 at the top of the min-heap
           - The next int, 12, is larger than root, 1, so take 1, out and insert 12. Root is now 3.
           - The next int, 2, is skipped because it is smaller than root, 3
           - The last int, 12, is larger than root, so root, 3, is popped and 12 is added, root is now 5

           - Min heap now contains the 3 largest ints in the array in O(n) time
           - A sorting algorithm is unneeded because the heap tracks the elements for us

    How to identify:
        - Top 'K' Numbers (easy)
        - top 'K' Frequent Numbers (medium)
    

13. K-Way Merge
    - Helps solve problems involving a set of sorted arrays
    - When given 'K' sorted arrays, we can use a Heap to efficiently perform a sorted traversal of all the 
      elements of all arrays.
    - Push the smallest element of each array into Min Heap to get the overall min
    - After getting overall Min, push the next element from the same array into the heap
    - Then, repeat this process to make a sorted traversal of all elements

    - The pattern looks like this:

        1. Insert the first element of each array in a Min Heap

        2. After this, take out the smallest (top) element from the heap and add it to the merged list

        3. After removing the smallest element from the heap, insert the next element of the same list 
           into the heap

        4. Repeat steps 2 and 3 to populate the merged list in sorted order.

    How to identify the K-way merge pattern:
        - The problem will featuer sorted arrays, lists, or a matrix
        - If the problem asks you to merge sorted lists, find the smallest element in a sorted list

    Example Problems:
        - Merge K Sorted Lists (medium)
        - K Pairs with Largest Sums (hard)


14. Topological Sort

    - Used to find a linear ordering of elements that have dependencies on each other. 
    - For example: if event 'B' is dependent on event 'A', 'A' comes before 'B' in topological ordering
    - This pattern defines an easy way to understand the technique for performing topological sorting a set
      of elements

    The pattern works like this:

        1. Initialization
            a. Store the graph in adjacency lists by using a HashMap
            b. To find all sources, use a HashMap to keep the count of in-degrees. Build the graph and find
               in-degrees of all vertices

        2. Build the graph from the input and populate the in-degrees HashMap

        3. Find all sources
            a. All vertices with '0' in-degrees will be sources and are stored in a Queue

        4. Sort
            a. For each source, do the following things:
                i.    Add it to the sorted list
                ii.   Get all of its children from the graph
                iii.  Decrement the in-degree of each child by 1
                iv.   if a childs in-degree becomes '0', add it to the sources queue
            b. repeat (a), until the source Queue is empty


    How to identify:
        - The problem will deal with graphs that have no directed cycles
        - If you're asked to update all objects in a sorted order
        - If you have a class of objects that follow a particular order

    Example Problems:
        - Task scheduling (medium) 
        - Minimum height of a tree (hard)
